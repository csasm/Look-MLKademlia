# Copyright (C) 2009 Raul Jimenez
# Released under GNU LGPL 2.1
# See LICENSE.txt for more information

import random
import time

import logging

import identifier as identifier
import message as message
from node import Node, RoutingNode
from routing_table2 import RoutingTable


logger = logging.getLogger('dht')


#TODO2: Stop expelling nodes from tables when there are many consecutive
# timeouts (and enter off-line mode)

NUM_BUCKETS = identifier.ID_SIZE_BITS + 1
"""
We need (+1) to cover all the cases. See the following table:
Index | Distance      | Comment
0     | [2^0,2^1)     | All bits equal but the least significant bit
1     | [2^1,2^2)     | All bits equal till the second least significant bit
...
158   | [2^159,2^160) | The most significant bit is equal the second is not
159   | [2^159,2^160) | The most significant bit is different
-1    | 0             | The bit strings are equal
"""

DEFAULT_NUM_NODES = 8
NODES_PER_BUCKET = [] # 16, 32, 64, 128, 256]
NODES_PER_BUCKET[:0] = [DEFAULT_NUM_NODES] \
    * (NUM_BUCKETS - len(NODES_PER_BUCKET))

#REFRESH_PERIOD = 10 * 60 # 10 minutes
QUARANTINE_PERIOD = 3 * 60 # 3 minutes

MAX_NUM_TIMEOUTS = 3
PING_DELAY_AFTER_TIMEOUT = 30 #seconds


MIN_RNODES_BOOTSTRAP = 10
NUM_NODES_PER_BOOTSTRAP_STEP = 5

BOOTSTRAP_MODE = 'bootstrap_mode'
FIND_CLOSEST_MODE = 'find_closest_mode'
NORMAL_MODE = 'normal_mode'
MAINTENANCE_DELAY = {BOOTSTRAP_MODE: .2,
                     FIND_CLOSEST_MODE: 3,
                     NORMAL_MODE: 1}

REFRESH_DELAY_FOR_NON_NS = .020 #seconds

class RoutingManager(object):
    
    def __init__(self, my_node, querier, bootstrap_lookup_f,
                 bootstrap_nodes):
        self.my_node = my_node
        self.querier = querier
        self.bootstrap_lookup = bootstrap_lookup_f
        #Copy the bootstrap list
        self.bootstrap_nodes = [n for n in bootstrap_nodes]
        
        self.table = RoutingTable(my_node, NODES_PER_BUCKET)
        self.ping_msg = message.OutgoingPingQuery(my_node.id)
        self.find_closest_msg = message.OutgoingFindNodeQuery(
            my_node.id,
            my_node.id)
        #This must be called by an external party: self.do_bootstrap()
        #After initializing callbacks

        # maintenance variables
        self.last_maintenance_index = -1

        self.maintenance_mode = BOOTSTRAP_MODE
        self.lookup_mode = False
       
        self._query_received_queue = _QueryReceivedQueue(self.table)
        self._found_nodes_queue = _FoundNodesQueue(self.table)

        self.maintenance_tasks = [self._ping_a_staled_rnode,
                                  self._ping_a_query_received_node,
                                  self._ping_a_found_node]

    def notify_lookup_start(self):
        self.lookup_mode = True

    def notify_lookup_stop(self):
        self.lookup_mode = False

    
        
    def do_maintenance(self):
        if self.lookup_mode:
            # Do not send maintenance pings during lookup
            return MAINTENANCE_DELAY[self.maintenance_mode]
        
        if self.maintenance_mode == BOOTSTRAP_MODE:
            self._do_bootstrap()
        elif self.maintenance_mode == FIND_CLOSEST_MODE:
            self.bootstrap_lookup()
            self.maintenance_mode = NORMAL_MODE
        else:
            task = self.maintenance_tasks.pop(0)
            self.maintenance_tasks.append(task)
            task()
        return MAINTENANCE_DELAY[self.maintenance_mode]
        
    def _do_bootstrap(self):
        for _ in xrange(NUM_NODES_PER_BOOTSTRAP_STEP):
            if not self.bootstrap_nodes\
                    or 0:#self.table.num_rnodes > MIN_RNODES_BOOTSTRAP:
                # Stop bootstrap. Now find closest nodes
                self.maintenance_mode = FIND_CLOSEST_MODE
                return
            index = random.randint(0,
                                   len(self.bootstrap_nodes) - 1)
            self._send_maintenance_ping(self.bootstrap_nodes[index])
            del self.bootstrap_nodes[index]

    def _ping_a_staled_rnode(self):
        print '[%f] staled rnode maint' % (time.time())
        m_bucket = None
        while not m_bucket:
            # Find a non-empty bucket
            self.last_maintenance_index = (self.last_maintenance_index
                                           + 1) % NUM_BUCKETS
            m_bucket, r_bucket = self.table.buckets[self.last_maintenance_index]

        rnode = m_bucket.get_stalest_rnode()
        self.last_maintenance_index = (self.last_maintenance_index
                                       + 1) % NUM_BUCKETS
        if time.time() > rnode.last_seen + QUARANTINE_PERIOD:
            self._send_maintenance_ping(rnode)

    def _ping_a_found_node(self):
        print '[%f] found node maint' % (time.time())
        num_pings = 1
        if self.table.num_rnodes < MIN_RNODES_BOOTSTRAP:
            # Extra ping when bootstrapping
            num_pings += 1
        for _ in range(num_pings):
            node_ = self._found_nodes_queue.pop(0)
            if node_:
                logger.debug('pinging node found: %r', node_)
                self._send_maintenance_ping(node_)
            else:
                # Empty queue
                # If FIND_CLOSEST_MODE, this is the end of it
                self.maintenance_mode = NORMAL_MODE

    def _ping_a_query_received_node(self):
        print '[%f] query received maint' % (time.time())
        node_ = self._query_received_queue.pop(0)
        if node_: 
            self._send_maintenance_ping(node_)
                                  
    def _send_maintenance_ping(self, node_):
        if node_.id:
            log_distance = self.table.find_next_bucket_with_room_index(node_)
        else:
            # Bootstrap nodes don't have id
            log_distance = 0
        if log_distance:
            target = self.my_node.id.generate_close_id(log_distance)
            msg = message.OutgoingFindNodeQuery(self.my_node.id, target)
            m_bucket, r_bucket = self.table.buckets[log_distance]
            print 'FIND_NODE(%d:%d:%d)' % (log_distance,
                                           len(m_bucket),
                                           len(r_bucket)),
        else:
            print 'PING',
            msg = self.ping_msg
        if node_.id:
            m_bucket, r_bucket = self.table.get_buckets(node_)
            print 'to %r - %d:%d:%d --' % (
                node_.addr,
                node_.log_distance(self.my_node),
                len(m_bucket),
                len(r_bucket))
        else:
            print 'to UNKNOWN id'
        self.querier.send_query(msg, node_)

        
    def on_query_received(self, node_):
        m_bucket, r_bucket = self.table.get_buckets(node_)
        rnode = m_bucket.get_rnode(node_)
        if rnode:
            # node in routing table: inform rnode
            rnode.on_query_received()
            return
        # Node is not in routing table
        # Check reachability (if the bucket is not full)
        # TODO: check probation_allowed flag
        if m_bucket.there_is_room(node_):
            # there is room in the bucket: queue it
            self._query_received_queue.add(node_)
            return
        # No room in the main routing table
        # Add to replacement table (if the bucket is not full)
        worst_rnode = self._worst_rnode(r_bucket.rnodes)
        if worst_rnode \
                and worst_rnode.timeouts_in_a_row() > MAX_NUM_TIMEOUTS:
            r_bucket.remove(worst_rnode)
            r_bucket.add(node_.get_rnode())

            
    def on_response_received(self, node_, rtt=0): #TODO2:, rtt=0):
        m_bucket, r_bucket = self.table.get_buckets(node_)
        rnode = m_bucket.get_rnode(node_)
        if rnode:
            # node in routing table
            rnode.on_response_received()
            return
        # The node is not in main
        rnode = r_bucket.get_rnode(node_)
        if rnode:
            # node in replacement table
            # let's see whether there is room in the main
            rnode.on_response_received()
            #TODO: leave this for the maintenance task
            if m_bucket.there_is_room(node_):
                rnode = m_bucket.add(rnode)
                r_bucket.remove(rnode)
            return
        # The node is nowhere
        # Add to replacement table (if the bucket is not full)
        #TODO: check wether in replacement_mode
        if m_bucket.there_is_room():
            if not r_bucket:
                # Replacement is empty: add to main
                m_bucket.add(node_.get_rnode())
                return
        # The main bucket is full or the repl bucket is not empty
        worst_rnode = self._worst_rnode(r_bucket.rnodes)
        # Get the worst node in replacement bucket and see whether
        # it's bad enough to be replaced by node_
        if worst_rnode \
                and worst_rnode.timeouts_in_a_row() > MAX_NUM_TIMEOUTS:
            # This node is better candidate than worst_rnode
            r_bucket.remove(worst_rnode)
            r_bucket.add(node_.get_rnode())
        
    def on_error_received(self, node_):
        pass
    
    def on_timeout(self, node_):
        if not node_.id:
            return # This is a bootstrap node (just addr, no id)
        m_bucket, r_bucket = self.table.get_buckets(node_)
        rnode = m_bucket.get_rnode(node_)
        if rnode:
            # node in routing table: check whether it should be removed
            rnode.on_timeout()
            print 'refresh repl_bucket %d-%d' % (
                node_.log_distance(self.my_node),
                len(m_bucket.rnodes))
            #TODO: ?????????????????????????????????????????
            self._refresh_replacement_bucket(r_bucket)
            m_bucket.remove(rnode)
            if r_bucket.there_is_room():
                r_bucket.add(rnode)
            else:
                worst_rnode = self._worst_rnode(r_bucket.rnodes)
                if worst_rnode:
                    # Replace worst node in replacement table
                    r_bucket.remove(worst_rnode)
                    #self._refresh_replacement_bucket(replacement_bucket)
                    # We don't want to ping the node which just did timeout
                    r_bucket.add(rnode)
        # Node is not in main table
        rnode = r_bucket.get_rnode(node_)
        if rnode:
            # Node in replacement table: just update rnode
            rnode.on_timeout()
            
    def on_nodes_found(self, nodes):
        logger.debug('nodes found: %r', nodes)
        self._found_nodes_queue.add(nodes)

    def get_closest_rnodes(self, target_id, num_nodes=DEFAULT_NUM_NODES):
        return self.table.get_closest_rnodes(target_id, num_nodes)

    def get_main_rnodes(self):
        return self.table.get_main_rnodes()

    def print_stats(self):
        self.table.print_stats()

    def _refresh_replacement_bucket(self, bucket):
        for rnode in bucket.rnodes:
            self._send_maintenance_ping(rnode)
        print '--'
    
    def _worst_rnode(self, rnodes):
        max_num_timeouts = -1
        worst_rnode_so_far = None
        for rnode in rnodes:
            num_timeouots = rnode.timeouts_in_a_row()
            if num_timeouots >= max_num_timeouts:
                max_num_timeouts = num_timeouots
                worst_rnode_so_far = rnode
        return worst_rnode_so_far

        
class _QueryReceivedQueue(object):

    def __init__(self, table):
        self.table = table
        self._queue = []

    def add(self, node_):
        self._queue.append(node_)

    def pop(self, pos):
        while self._queue:
            node_ = self._queue.pop(pos)
            m_bucket, r_bucket = self.table.get_buckets(node_)
            if m_bucket.there_is_room():
                return node_

class _FoundNodesQueue(object):

    def __init__(self, table):
        self.table = table
        self._queue = []
        self._recently_queued_nodes = [time.time(),
                                       set(),
                                       set()]

    def add(self, nodes):
        if time.time() > self._recently_queued_nodes[0] + 5 * 60:
            self._recently_queued_nodes = [time.time(),
                                           set(),
                                           self._recently_queued_nodes[1]]
        for node_ in nodes:
            if node_ in self._recently_queued_nodes[1] \
                    or node_ in self._recently_queued_nodes[2]:
                # This node has already been queued
                continue
            if len(self._queue) > 50:
                # Queue is already too long
                continue
            m_bucket, r_bucket = self.table.get_buckets(node_)
            rnode = m_bucket.get_rnode(node_)
            if not rnode and m_bucket.there_is_room():
                # Not in the main: add to the queue if there is room in main
                self._queue.append(node_)
                self._recently_queued_nodes[1].add(node_)

    def pop(self, pos): 
        while self._queue:
            node_ = self._queue.pop(pos)
            m_bucket, r_bucket = self.table.get_buckets(node_)
            rnode = m_bucket.get_rnode(node_)
            if not rnode and m_bucket.there_is_room():
                # Not in the main: return it if there is room in main
                return node_

                
class RoutingManagerMock(object):

    def get_closest_rnodes(self, target_id):
        import test_const as tc
        if target_id == tc.INFO_HASH_ZERO:
            return (tc.NODES_LD_IH[155][4], 
                    tc.NODES_LD_IH[157][3],
                    tc.NODES_LD_IH[158][1],
                    tc.NODES_LD_IH[159][0],
                    tc.NODES_LD_IH[159][2],)
        else:
            return tc.NODES
